//데이터 타입

var 변수 = 1; //변수 지정
var 어레이 = [1, 2, 3, 4]; // 변수에 Reference가 저장됨(화살표)

var obj = { name: "kim" }; // 어레이와 오브젝트는 reference 저장(화살표)

var 이름1 = "김";
var 이름2 = 이름1; // '복사'라고 한다.

이름1 = "박"; // 이름1='김', 이름2='박' 이름1의 값을 변경해도 이름2와 무관하다.

var 이름1 = { name: "김" };
var 이름2 = 이름1;
이름1.name = "박";

//이름1.name => '박' , 이름2.name => '김' :::  Why?? Reference data type은 직접 data를 넣는게 아닌 위치를 저장하는 것이기에 출력 값을 공유하게 된다.

/*--------------------------------------------------------------------------------------------------*/

function 변경(obj) {
  obj.name = "park";
}

변경(이름1); // 위와 같은 코드로 서로 다른 오브젝트의 값을 변경해줄 수 있다.

// 파라미터는 '변수생성'과 '할당'이 생성과 동시에 이루어짐 obj.라는 새로운 파라미터로 화살표를 재할당함..

/*--------------------------------------------------------------------------------------------------*/
//생성자란? (Constructor)
//object를 마구 복사하고 싶을때

function 기계(이름) {
  this.name = 이름;
  this.age = 15;
  this.sayHi = function () {
    console.log("안녕 나는" + this.name + "이야");
  };
}

var 학생1 = new 기계("park");
var 학생2 = new 기계("kim");

// 생성자로 생성된 오브젝트를 'instance'라고 함

/*--------------------------------------------------------------------------------------------------*/
//prototype(유전자)
