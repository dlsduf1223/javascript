// Template Literals,   Backtic(Back Quote), 신문법
var 문자 = `손흥민`;

// 백틱을 쓰는 이유 1. 엔터키 가능, 2. 중간에 변수 넣기 쉬움
var 변수 = `손흥민`;
var 문자 = `안녕 ${변수}`;
console.log(문자);

var 템플릿 = `<div>${변수}</div>`;

//문자열 + 함수도 가능한 back quote

var 문자 = `안녕 ${변수} 나는 누구`;
function 함수() {
  return 10;
}

/*--------------------------------------------------------------------------------------------------*/

함수`안녕 ${변수} 나는 누구`; // tagged literal은 문장 해체분석할때 주로 쓰인다.

function 해체분석기(문자들, 변수들) {
  console.log(문자들);
  console.log(변수들);
}
해체분석기`안녕 ${변수} 나는 누구`; //기댓값 : 안녕, 나는누구
//          ${변수}

//문장의 단어순서 변경 , 제거, 변수위치변경 등의 기능을 하는 함수

//(글자 순서 변경 기능)
function 해체분석기(문자들, 변수1, 변수2) {
  console.log(문자들[1], 문자들[0]);
} // 어절 단위로 배열에 들어감, 그 위치를 바꾼것

/*--------------------------------------------------------------------------------------------------*/

//예제

var pants = 20;
var socks = 100;

function 해체분석기1(문자, 변수1, 변수2) {
  console.log(문자[1] + 변수1 + 문자[0] + 변수2);
}

해체분석기1`바지 ${pants} 양말 ${socks}`; // 바지와 양말의 위치 변경

//예제 2

var pants = 0;
var socks = 324;

function 해체분석기2(문자, 변수1, 변수2) {
  if (변수1 == 0) {
    console.log(문자[0] + "안팔아요");
  }
}
해체분석기`바지 ${pants} 양말 ${socks}`; // 변수 pants가 0일때 '바지 안팔아요'라는 텍스트 출력

/*--------------------------------------------------------------------------------------------------*/
//Sprea Operator

var 어레이 = ["hello", "world"];
console.log(어레이); //기댓값 : 'hello', 'world'

console.log(...어레이); //기댓값 : hello world

// ... 대괄호, 중괄호를 제거하는 느낌

/*--------------------------------------------------------------------------------------------------*/

var 문자 = "hello";
console.log(문자); // hello
console.log(...문자); // h e l l o
// = console.log('h','e','l','l','o'); 와 같은 의미가 된다.
// 이걸 어디다 쓰냐면...
// 어레이를 합치거나, deep copy를 하거나 할때 굉장히 자주씁니다.
/*--------------------------------------------------------------------------------------------------*/

var a = [1, 2, 3];
var b = [4, 5];

var c = [...a, ...b]; /// c = [1,2,3,4,5]

/*--------------------------------------------------------------------------------------------------*/
//Deep Copy
var a = [1, 2, 3];
var b = a;
a[3] = 4; // 이렇게 해버리면 b = [1,2,3,4]이 된다. 등호로 복사하면 두 어레이의 값을 공유해버리기 때문..

// 그러면 어떻게 해야할까요

var a = [1, 2, 3];
var b = [...a];
a[3] = 4; // 이렇게 하면 b = [1,2,3], a = [1,2,3,4]로 원하는 값이 들어감

// 어레이, 오브젝트는 함부러 등호로 복사하지 말자.

// 오브젝트도  deep copy(스프레드) 가능.

var O1 = {
  a: 1,
  b: 2,
};

var O2 = { c: 3 };

var O3 = { ...O1, ...O2 }; // 프로퍼티 복사

//프로퍼티 등에 값 중복이 일어나면 순서 상 뒤에 있는 값으로 한다.

//함수에 파라미터를 넣을때

function 더하기(a, b, c) {
  console.log(a + b + c);
}
더하기(1, 2, 3);

var 어레이 = [10, 20, 30];

더하기(어레이[0], 어레이[1], 어레이[2]);
더하기.apply(undefined, 어레이);
더하기(...어레이); //요즘 방식

// 오브젝트 내의 함수를 다른 오브젝트에서도 적용할 수 있게 해주는 메쏘드
var person = {
  name: park,
  인사: function () {
    console.log("안녕") + this.name;
  },
};
person.인사(); // 안녕 park

var person2 = {
  name: 손,
};

person.인사.apply(person2); // 안녕 손

// apply와 call의 차이
//apply는 array를 파라미터로 받을 수 있고, call은 불가능
